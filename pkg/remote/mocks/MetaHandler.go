// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"

	remote "github.com/cloudwego/kitex/pkg/remote"
	mock "github.com/stretchr/testify/mock"
)

// MetaHandler is an autogenerated mock type for the MetaHandler type
type MetaHandler struct {
	mock.Mock
}

// ReadMeta provides a mock function with given fields: ctx, msg
func (_m *MetaHandler) ReadMeta(ctx context.Context, msg remote.Message) (context.Context, error) {
	ret := _m.Called(ctx, msg)

	var r0 context.Context
	if rf, ok := ret.Get(0).(func(context.Context, remote.Message) context.Context); ok {
		r0 = rf(ctx, msg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, remote.Message) error); ok {
		r1 = rf(ctx, msg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WriteMeta provides a mock function with given fields: ctx, msg
func (_m *MetaHandler) WriteMeta(ctx context.Context, msg remote.Message) (context.Context, error) {
	ret := _m.Called(ctx, msg)

	var r0 context.Context
	if rf, ok := ret.Get(0).(func(context.Context, remote.Message) context.Context); ok {
		r0 = rf(ctx, msg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, remote.Message) error); ok {
		r1 = rf(ctx, msg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
